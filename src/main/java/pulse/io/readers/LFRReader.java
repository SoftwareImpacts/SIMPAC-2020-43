package pulse.io.readers;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Objects;
import java.util.StringTokenizer;

import pulse.input.ExperimentalData;
import pulse.input.Metadata;
import pulse.input.Range;
import pulse.properties.NumericProperty;
import pulse.properties.NumericPropertyKeyword;
import pulse.ui.Messages;

/**
 * A {@code CurveReader} capable of reading ASCII master-files generated by the
 * Linseis software.
 * <p>
 * An {@code .lfr} file contains a table with filenames of individual
 * experimental heating curves, their respective IDs (as they appear in the
 * Linseis software), test temperatures, and other variables. The individual
 * ASCII files encoded in ASCII represent tab-delimited time-temperature data.
 * </p>
 * 
 * <p>
 * {@code PULsE} currently accepts the formats of only those files output by
 * Linseis LFA systems that are in ASCII formats, so results from other systems
 * may be edited to be readable by {@code PULsE}. Linseis automatically outputs
 * .lf files for each shot, containing information about the shot. However,
 * these are binary files and their format is unknown. Therefore, after
 * performing a shot, clicking “Export/Save As” in the Linseis AproSoft program
 * will export the data for the heating curve recorded as a {@code .txt} file
 * (in a readable format). This should be done for any shot or curve you wish to
 * analyse in {@code PULsE}.
 * </p>
 * 
 * <p>
 * After all shots have been recorded, click “Severals” in the Linseis analysis
 * window and select all exported heating curve {@code .txt} files for the
 * experiment. Clicking “Ok” and “Save” on the following windows will create a
 * {@code .lfr} file with file locations and data for all the heating curves.
 * Save this in the same folder as the {@code .txt} files.
 * 
 */

public class LFRReader implements CurveReader {

	private static CurveReader instance = new LFRReader();

	private final static double CONVERSION_TO_KELVIN = 273;

	private LFRReader() {
	}

	/**
	 * @return The supported extension ({@code .lfr}).
	 */

	@Override
	public String getSupportedExtension() {
		return Messages.getString("LFRReader.0");
	}

	/**
	 * Reads through the {@code file}, identifies the names of other files with
	 * individual heating curves, theirs external IDs and test temperatures (in
	 * degrees Celsius, later converted to Kelvin).
	 * <p>
	 * Creates a {@code List} of {@code ExperimentalData} objects with the size
	 * equal to the number of individual entries in the master-file. Searches for
	 * the individual files listed in the namelist and stored in the same directory
	 * where the master-file has been found previously. Upon finding the individual
	 * files, invokes {@code readSingleCurve} on each of them sequentially and
	 * stores the {@code ExperimentalData} in a list. Finally, invokes the
	 * {@code sort} method on that list to sort it.
	 * </p>
	 * 
	 * @param file the master-file with {@code .lfr} suffix
	 * @return a {@code List} of @code ExperimentalData}, containing all information
	 *         stored in both the master file and linked individual files.
	 * @see sort
	 * @see readSingleCurve
	 */

	@Override
	public List<ExperimentalData> read(File file) throws IOException {
		Objects.requireNonNull(file, Messages.getString("LFRReader.1"));

		final String directory;
                String stringSplitter;
                List<String> fileNames;
                HashMap<String, Metadata> fileTempMap;
            try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
                directory = file.getAbsoluteFile().getParent();
                String delims = Messages.getString("LFRReader.2");
                stringSplitter = Messages.getString("LFRReader.3");
                StringTokenizer tokenizer;
                // skip two first lines
                reader.readLine();
                reader.readLine();
                fileNames = new LinkedList<>();
                fileTempMap = new HashMap<>();
                String tmp;
                for (String line = reader.readLine(); line != null; line = reader.readLine()) {
                    tokenizer = new StringTokenizer(line);
                    int id = Integer.parseInt(tokenizer.nextToken(delims)); // id
                    
                    tmp = tokenizer.nextToken(delims);
                    tmp = tmp.split(stringSplitter)[0]; // write file names without extensions
                    
                    fileNames.add(tmp); // fileName
                    
                    tokenizer.nextToken(delims); // sample id
                    NumericProperty temperature = NumericProperty.derive(NumericPropertyKeyword.TEST_TEMPERATURE,
                            Double.parseDouble(tokenizer.nextToken()) + CONVERSION_TO_KELVIN); // test temperature
                    
                    fileTempMap.put(tmp, new Metadata(temperature, id)); // assign metadata object with external id and
                    // temperature
                    
                }
            }

		List<ExperimentalData> curves = new LinkedList<>();

		String[] nameAndExtension;
		String toReplace = Messages.getString("LFRReader.5");

		for (File f : new File(directory).listFiles()) {

			nameAndExtension = f.getName().split(stringSplitter);
			nameAndExtension[0] = nameAndExtension[0].replaceAll(toReplace, " ");

			for (String name : fileNames) {
				if (nameAndExtension[0].equalsIgnoreCase(name.replaceAll(toReplace, " "))) { // add only those curves
																								// listed in the master
																								// file
					curves.add(readSingleCurve(f, fileTempMap.get(name)));
					break;
				}
			}

		}

		return CurveReader.sort(curves);

	}

	/**
	 * Creates a single {@code ExperimentalData} object with the time-temperature
	 * information retrieved from {@code file} and using the previously generated
	 * {@code Metadata} object, containing the external ID and the test temperature
	 * of this heating curve.
	 * <p>
	 * The time in Linseis files is usually stored in [ms], hence the time values
	 * are multiplied by {@code 1E-3} to adhere to the {@code PULsE} format. The
	 * signal rise is recorded in [mV], hence it represents a relative scale, which
	 * however is functionally linked to the temperature rise. {@code PULsE} does
	 * not establish this functional relation. Instead, it uses the signal values in
	 * the dimensionless problem formulation.
	 * </p>
	 * 
	 * @param file     the file with a data just enough for a single
	 *                 {@code ExperimentalData} object
	 * @param metadata the previously loaded {@code Metadata} which includes the
	 *                 external ID and the test temperature
	 * @return an {@code ExperimentalData} object
	 * @throws IOException
	 */

	public ExperimentalData readSingleCurve(File file, Metadata metadata) throws IOException {
		Objects.requireNonNull(file, Messages.getString("LFRReader.9"));

		ExperimentalData curve = new ExperimentalData();

            try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
                String delims = Messages.getString("LFRReader.10");
                StringTokenizer tokenizer;
                curve.setMetadata(metadata);
                curve.clear();
                reader.readLine(); // skip first line
                double time, temp;
                for (String line = reader.readLine(); line != null; line = reader.readLine()) {
                    tokenizer = new StringTokenizer(line);
                    
                    time = Double.parseDouble(tokenizer.nextToken(delims)) * 1E-3;
                    temp = Double.parseDouble(tokenizer.nextToken(delims));
                    
                    curve.addPoint(time, temp);
                    
                }
                curve.setRange(new Range(curve.getTimeSequence()));
            }

		return curve;

	}

	/**
	 * Retrieves the single instance of this class. As this class uses a singleton
	 * pattern, there is only one such instance.
	 * 
	 * @return the single instance of this class.
	 */

	public static CurveReader getInstance() {
		return instance;
	}

}