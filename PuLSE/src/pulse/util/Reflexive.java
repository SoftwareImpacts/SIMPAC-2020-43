package pulse.util;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

/**
 * An object is declared {@code Reflexive} if {@code PULsE} needs to know all its available subclasses.
 *
 */

public interface Reflexive {	
	
	/**
	 * Uses the {@code ReflexiveFinder} to create a list of simple instance of {@code reflexiveType} generated by any
	 * classes listed in the package {@code pckgname}.
	 * @see ReflexiveFinder.simpleInstances(String)  
	 * @param <T> a class implementing {@code Reflexive}
	 * @param reflexiveType a class that extends {@code T}
	 * @param pckgname the String with the package name
	 * @return a list of {@code Reflexive} conforming with the conditions above.
	 */
	
	public static <T extends Reflexive> List<T> instancesOf(Class<? extends T> reflexiveType, String pckgname) {		
		List<Reflexive> ref = new LinkedList<Reflexive>();
		List<T> p	= new ArrayList<T>();
		
		ref.addAll(ReflexiveFinder.simpleInstances(pckgname));
		
		for(Reflexive r : ref) 
			if(reflexiveType.isAssignableFrom(r.getClass()))
				p.add((T) r);
		
		return p;
		
	}
	
	/**
	 * Uses the {@code ReflexiveFinder} to create a list of simple instance of {@code reflexiveType} generated by any
	 * classes listed in the same package where the {@code reflexiveType} is found.
	 * @see ReflexiveFinder.simpleInstances(String)  
	 * @param <T> a class implementing {@code Reflexive}
	 * @param reflexiveType a class that extends {@code T}
	 * @return a list of {@code Reflexive} conforming with the conditions above.
	 */
	
	public static <T extends Reflexive> List<T> instancesOf(Class<? extends T> reflexiveType) {
		return Reflexive.instancesOf(reflexiveType, reflexiveType.getPackage().getName());
	}
	
}
